// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/monitoror/monitoror/api/config"
	configmodels "github.com/monitoror/monitoror/api/config/models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/monitoror/monitoror/models"
)

// TileSettingManager is an autogenerated mock type for the TileSettingManager type
type TileSettingManager struct {
	mock.Mock
}

// Register provides a mock function with given fields: tileType, minimalVersion, variants
func (_m *TileSettingManager) Register(tileType models.TileType, minimalVersion configmodels.RawVersion, variants []models.VariantName) config.TileEnabler {
	ret := _m.Called(tileType, minimalVersion, variants)

	var r0 config.TileEnabler
	if rf, ok := ret.Get(0).(func(models.TileType, configmodels.RawVersion, []models.VariantName) config.TileEnabler); ok {
		r0 = rf(tileType, minimalVersion, variants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.TileEnabler)
		}
	}

	return r0
}

// RegisterGenerator provides a mock function with given fields: tileType, minimalVersion, variants
func (_m *TileSettingManager) RegisterGenerator(tileType models.TileType, minimalVersion configmodels.RawVersion, variants []models.VariantName) config.TileGeneratorEnabler {
	ret := _m.Called(tileType, minimalVersion, variants)

	var r0 config.TileGeneratorEnabler
	if rf, ok := ret.Get(0).(func(models.TileType, configmodels.RawVersion, []models.VariantName) config.TileGeneratorEnabler); ok {
		r0 = rf(tileType, minimalVersion, variants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.TileGeneratorEnabler)
		}
	}

	return r0
}
