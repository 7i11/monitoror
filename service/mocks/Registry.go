// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	configmodels "github.com/monitoror/monitoror/api/config/models"
	mock "github.com/stretchr/testify/mock"

	models "github.com/monitoror/monitoror/models"

	registry "github.com/monitoror/monitoror/service/registry"
)

// Registry is an autogenerated mock type for the Registry type
type Registry struct {
	mock.Mock
}

// RegisterGenerator provides a mock function with given fields: generatedTileType, minimalVersion, variantNames
func (_m *Registry) RegisterGenerator(generatedTileType models.TileType, minimalVersion configmodels.RawVersion, variantNames []models.VariantName) registry.GeneratorEnabler {
	ret := _m.Called(generatedTileType, minimalVersion, variantNames)

	var r0 registry.GeneratorEnabler
	if rf, ok := ret.Get(0).(func(models.TileType, configmodels.RawVersion, []models.VariantName) registry.GeneratorEnabler); ok {
		r0 = rf(generatedTileType, minimalVersion, variantNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.GeneratorEnabler)
		}
	}

	return r0
}

// RegisterTile provides a mock function with given fields: tileType, minimalVersion, variantNames
func (_m *Registry) RegisterTile(tileType models.TileType, minimalVersion configmodels.RawVersion, variantNames []models.VariantName) registry.TileEnabler {
	ret := _m.Called(tileType, minimalVersion, variantNames)

	var r0 registry.TileEnabler
	if rf, ok := ret.Get(0).(func(models.TileType, configmodels.RawVersion, []models.VariantName) registry.TileEnabler); ok {
		r0 = rf(tileType, minimalVersion, variantNames)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.TileEnabler)
		}
	}

	return r0
}
