---
name: continuous-integration

# Trigger build on master, tags and pull requests
on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'docs/**'

# Jobs definition
jobs:
  test-core:
    name: test / core
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - uses: actions/checkout@v1

      - name: install
        run: |
          go get -u gotest.tools/gotestsum
          make install

      - name: lint
        uses: reviewdog/action-golangci-lint@v1
        with:
          github_token: ${{ secrets.github_token }}
          golangci_lint_flags: "--config=.golangci.yml"
          tool_name: report - lint - core

      - name: tests
        run: |
          # https://github.com/actions/setup-go/issues/14
          export PATH=${PATH}:`go env GOPATH`/bin
          make test-coverage

      - name: coverage
        uses: codecov/codecov-action@v1.0.4
        with:
          token: ${{ secrets.codecov_token }}
          yml: .github/.codecov.yml
          flags: core

  test-ui:
    name: test / ui
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 10.x

      - uses: actions/checkout@v1

      - name: install
        working-directory: ui
        run: yarn install

      - name: tests
        working-directory: ui
        run: yarn run test

      - name: coverage
        uses: codecov/codecov-action@v1.0.4
        with:
          token: ${{ secrets.codecov_token }}
          yml: .github/.codecov.yml
          file: ui/tests/coverage/*
          flags: ui

  build:
    name: build
    needs: [test-core, test-ui]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v1
        with:
          node-version: 10.x

      - uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - uses: actions/checkout@v1

      - name: install-ui
        working-directory: ui
        run: yarn install

      - name: install-core
        run: |
          go get -u github.com/GeertJohan/go.rice/rice
          make install

      - name: build-ui
        working-directory: ui
        run: yarn run build

      - name: build-core
        run: |
          # https://github.com/actions/setup-go/issues/14
          export PATH=${PATH}:`go env GOPATH`/bin
          make build-cross

      - uses: actions/upload-artifact@v1
        with:
          name: binaries
          path: binaries

  release:
    name: release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: binaries

      - run: ls binaries

      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: v${{ github.ref }}
          draft: true
          prerelease: true

      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/monitoror-linux-amd64
          asset_name: monitoror-linux-amd64-${{ github.ref }}
          asset_content_type: application/x-executable

      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/monitoror-linux-arm
          asset_name: monitoror-linux-arm-${{ github.ref }}
          asset_content_type: application/x-executable

      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/monitoror-windows-amd64.exe
          asset_name: monitoror-windows-amd64-${{ github.ref }}.exe
          asset_content_type: application/x-dosexec

      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: binaries/monitoror-macos
          asset_name: monitoror-macos-${{ github.ref }}
          asset_content_type: application/x-mach-binary
