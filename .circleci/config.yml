version: 2.1
jobs:
  test: # Running tests
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout

      # Download the dependencies and cache them
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: "Install dependencies"
          command: make install
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

      - run:
          name: "Execute tests and coverage"
          command: make test-coverage

      - persist_to_workspace:
          root: .
          paths:
            - coverage.txt

  build: # Building monitoror for all targets
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout

      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run:
          name: "Install dependencies"
          command: make install
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg"

      - run:
          name: "Execute tests and coverage"
          command: make build-all

      - store_artifacts:
          path: builds

      - persist_to_workspace:
          root: .
          paths:
            - builds/*

  deploy-coverage: # Deploy code coverage
    docker:
      - image: circleci/golang:1.12
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: bash <(curl -s https://codecov.io/bash)

  deploy-binaries: # Deploy binaries
    docker:
      - image: circleci/golang:1.12
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            ./.circleci/release-on-github

workflows:
  version: 2
  monitoror-pipeline:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only: master
      - deploy-coverage:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-binaries:
          requires:
            - build
          filters:
            branches:
              only: master
