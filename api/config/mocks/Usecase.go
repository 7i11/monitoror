// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	config "github.com/monitoror/monitoror/api/config"
	mock "github.com/stretchr/testify/mock"

	models "github.com/monitoror/monitoror/api/config/models"

	monitorormodels "github.com/monitoror/monitoror/models"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetConfig provides a mock function with given fields: params
func (_m *Usecase) GetConfig(params *models.ConfigParams) *models.ConfigBag {
	ret := _m.Called(params)

	var r0 *models.ConfigBag
	if rf, ok := ret.Get(0).(func(*models.ConfigParams) *models.ConfigBag); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ConfigBag)
		}
	}

	return r0
}

// Hydrate provides a mock function with given fields: _a0
func (_m *Usecase) Hydrate(_a0 *models.ConfigBag) {
	_m.Called(_a0)
}

// Register provides a mock function with given fields: tileType, minimalVersion, variants
func (_m *Usecase) Register(tileType monitorormodels.TileType, minimalVersion models.RawVersion, variants []monitorormodels.VariantName) config.TileEnabler {
	ret := _m.Called(tileType, minimalVersion, variants)

	var r0 config.TileEnabler
	if rf, ok := ret.Get(0).(func(monitorormodels.TileType, models.RawVersion, []monitorormodels.VariantName) config.TileEnabler); ok {
		r0 = rf(tileType, minimalVersion, variants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.TileEnabler)
		}
	}

	return r0
}

// RegisterGenerator provides a mock function with given fields: tileType, minimalVersion, variants
func (_m *Usecase) RegisterGenerator(tileType monitorormodels.TileType, minimalVersion models.RawVersion, variants []monitorormodels.VariantName) config.TileGeneratorEnabler {
	ret := _m.Called(tileType, minimalVersion, variants)

	var r0 config.TileGeneratorEnabler
	if rf, ok := ret.Get(0).(func(monitorormodels.TileType, models.RawVersion, []monitorormodels.VariantName) config.TileGeneratorEnabler); ok {
		r0 = rf(tileType, minimalVersion, variants)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(config.TileGeneratorEnabler)
		}
	}

	return r0
}

// Verify provides a mock function with given fields: _a0
func (_m *Usecase) Verify(_a0 *models.ConfigBag) {
	_m.Called(_a0)
}
