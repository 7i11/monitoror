// Code generated by mockery v1.0.0. DO NOT EDIT.

// If you want to rebuild this file, make mock-monitorable

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/monitoror/monitoror/monitorable/http/models"
import tiles "github.com/monitoror/monitoror/models/tiles"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// HttpAny provides a mock function with given fields: params
func (_m *Usecase) HttpAny(params *models.HttpAnyParams) (*tiles.HealthTile, error) {
	ret := _m.Called(params)

	var r0 *tiles.HealthTile
	if rf, ok := ret.Get(0).(func(*models.HttpAnyParams) *tiles.HealthTile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tiles.HealthTile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.HttpAnyParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpJson provides a mock function with given fields: params
func (_m *Usecase) HttpJson(params *models.HttpJsonParams) (*tiles.HealthTile, error) {
	ret := _m.Called(params)

	var r0 *tiles.HealthTile
	if rf, ok := ret.Get(0).(func(*models.HttpJsonParams) *tiles.HealthTile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tiles.HealthTile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.HttpJsonParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpRaw provides a mock function with given fields: params
func (_m *Usecase) HttpRaw(params *models.HttpRawParams) (*tiles.HealthTile, error) {
	ret := _m.Called(params)

	var r0 *tiles.HealthTile
	if rf, ok := ret.Get(0).(func(*models.HttpRawParams) *tiles.HealthTile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tiles.HealthTile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.HttpRawParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpYaml provides a mock function with given fields: params
func (_m *Usecase) HttpYaml(params *models.HttpYamlParams) (*tiles.HealthTile, error) {
	ret := _m.Called(params)

	var r0 *tiles.HealthTile
	if rf, ok := ret.Get(0).(func(*models.HttpYamlParams) *tiles.HealthTile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tiles.HealthTile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.HttpYamlParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
